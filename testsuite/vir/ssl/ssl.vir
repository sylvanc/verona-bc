lib
  @getargv = "getargv"(): [[u8]]
  @puts = "puts"(ptr): i32
  @write = "write"(i32, ptr, usize): isize
  @happy_eyeballs = "happy_eyeballs"(dyn, dyn, ptr, ptr, i32): bool
  @async_close = "async_close"(ptr): none
  @async_set_arg = "async_set_arg"(ptr, dyn): bool
  @async_set_cb1 = "async_set_cb1"(ptr, dyn): bool
  @async_cb1 = "async_cb1"(ptr): none
  @async_read_start = "async_read_start"(ptr, dyn): bool
  @async_write = "async_write"(ptr, [u8]): none
  @uv_strerror = "uv_strerror"(i32): ptr
  @ssl_client = "ssl_client"(ptr, ptr): ptr
  @ssl_close = "ssl_close"(ptr): none
  @ssl_read = "ssl_read"(ptr, [u8]): i32
  @ssl_write = "ssl_write"(ptr, [u8]): none
  @ssl_plaintext = "ssl_plaintext"(ptr): [u8] | none

class @Conn
  @ssl: ptr
  @cb1 @conn_cb1
  @cb_read @conn_read

func @conn_cb1($self: @Conn, $status: i32): none
  $ssl_ref = ref $self @ssl
  $ssl = load $ssl_ref
  $0 = ffi @ssl_close($ssl)
  $status_text = ffi @uv_strerror($status)
  $1 = ffi @puts($status_text)
  $none = const none
  ret $none

func @conn_read($self: @Conn, $data: [u8]): none
  $stdout = const i32 1
  $ssl_ref = ref $self @ssl
  $ssl = load $ssl_ref
  $0 = ffi @ssl_read($ssl, $data)
  jump ^while
^while
  $plaintext = ffi @ssl_plaintext($ssl)
  $done = typetest $plaintext none
  cond $done ^done ^body
^body
  $text = makeptr $plaintext
  $len = len $plaintext
  $1 = ffi @write($stdout, $text, $len)
  jump ^while
^done
  $none = const none
  ret $none

class @Eyeballs
  @host: [u8]
  @cb @eyeballs_cb

func @eyeballs_cb($self: @Eyeballs, $tcp_h: ptr, $status: i32): none
  $zero = const i32 0
  $eq = eq $status $zero
  cond $eq ^success ^failure
^success
  $host_ref = ref $self @host
  $host = load $host_ref
  $host_ptr = makeptr $host
  $ssl = ffi @ssl_client($tcp_h, $host_ptr)
  $conn = region rc @Conn($ssl)
  $msg0 = const "GET / HTTP/1.1\r\nHost: "
  $msg1 = const "\r\nConnection: close\r\n\r\n"
  $0 = ffi @ssl_write($ssl, $msg0)
  $1 = ffi @ssl_write($ssl, $host)
  $2 = ffi @ssl_write($ssl, $msg1)
  $cb1 = lookup $conn @cb1
  $cb_read = lookup $conn @cb_read
  $3 = ffi @async_set_arg($tcp_h, $conn)
  $4 = ffi @async_set_cb1($tcp_h, $cb1)
  $5 = ffi @async_read_start($tcp_h, $cb_read)
  jump ^done
^failure
  $err = ffi @uv_strerror($status)
  $6 = ffi @puts($err)
  jump ^done
^done
  $none = const none
  ret $none

func @main(): i32
  $i0 = const usize 0
  $i1 = const usize 1
  $i2 = const usize 2
  $argv = ffi @getargv()
  $arg0_ref = ref $argv $i0
  $arg1_ref = ref $argv $i1
  $host = load $arg0_ref
  $port = load $arg1_ref
  $eyeballs = region rc @Eyeballs($host)
  $cb = lookup $eyeballs @cb
  $host_ptr = makeptr $host
  $port_ptr = makeptr $port
  $delay = const i32 100
  $0 = ffi @happy_eyeballs($eyeballs, $cb, $host_ptr, $port_ptr, $delay)
  $ret = const i32 0
  ret $ret
